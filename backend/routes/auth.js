// backend/routes/auth.js
import express from "express";
import User from "../models/User.js"; // Assurez-vous que votre mod√®le User est correct
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";

const router = express.Router();

// üîê Route pour la connexion
router.post("/login", async (req, res) => {
  const { email, password } = req.body;
  try {
    console.log("Tentative de connexion avec l'email:", email); // Log pour la tentative de connexion

    // V√©rification de l'email
    const user = await User.findOne({ email });
    if (!user) {
      console.log("Utilisateur non trouv√© pour l'email:", email); // Log si l'utilisateur n'est pas trouv√©
      return res.status(404).json({ message: "Utilisateur non trouv√©" });
    }

    // Comparaison du mot de passe
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      console.log("Mot de passe incorrect pour l'email:", email); // Log si le mot de passe est incorrect
      return res.status(400).json({ message: "Mot de passe incorrect" });
    }

    // G√©n√©ration du token JWT
    const token = jwt.sign(
      { id: user._id, role: user.role },
      process.env.JWT_SECRET || "yourSecretKey",
      { expiresIn: "1h" } // Expiration du token apr√®s 1 heure
    );

    console.log("Connexion r√©ussie pour l'email:", email); // Log pour la r√©ussite de la connexion

    // R√©ponse avec le token et le r√¥le de l'utilisateur
    res.json({ token, role: user.role });
  } catch (err) {
    console.error("Erreur lors de la connexion:", err.message); // Log d'erreur
    res
      .status(500)
      .json({ message: "Une erreur est survenue. Veuillez r√©essayer." });
  }
});

// üîê Route pour configurer des administrateurs par d√©faut
router.post("/setup-admins", async (req, res) => {
  const users = [
    {
      email: "admin@luma.com",
      password: await bcrypt.hash("admin123", 10),
      role: "admin",
    },
    {
      email: "rh@luma.com",
      password: await bcrypt.hash("rh123", 10),
      role: "rh",
    },
    {
      email: "com@luma.com",
      password: await bcrypt.hash("com123", 10),
      role: "commercial",
    },
  ];

  try {
    console.log("D√©but de la configuration des administrateurs...");

    // V√©rifier si les utilisateurs existent d√©j√†, sinon les cr√©er
    for (const user of users) {
      console.log(
        `V√©rification de l'existence de l'utilisateur : ${user.email}`
      );

      const existingUser = await User.findOne({ email: user.email }); // Correction ici, pas de `where`

      console.log(`Utilisateur trouv√© : ${existingUser ? "Oui" : "Non"}`);

      // Si l'utilisateur n'existe pas, on le cr√©e
      if (!existingUser) {
        console.log(`Cr√©ation de l'utilisateur : ${user.email}`);
        const newUser = new User({
          email: user.email,
          password: user.password,
          role: user.role,
        });

        await newUser.save(); // Sauvegarder l'utilisateur dans MongoDB
        console.log(`Utilisateur ${user.email} cr√©√© avec succ√®s.`);
      } else {
        console.log(`L'utilisateur ${user.email} existe d√©j√†.`);
      }
    }

    res
      .status(201)
      .json({ message: "Utilisateurs administrateurs cr√©√©s avec succ√®s." });
  } catch (err) {
    console.error(
      "Erreur lors de la configuration des administrateurs:",
      err.message
    );
    res.status(500).json({
      message: "Erreur lors de la configuration des administrateurs.",
    });
  }
});

export default router;
